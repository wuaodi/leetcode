"""
现有一份 n + m 次投掷单个 六面 骰子的观测数据，骰子的每个面从 1 到 6 编号。观测数据中缺失了 n 份，你手上只拿到剩余 m 次投掷的数据。幸好你有之前计算过的这 n + m 次投掷数据的 平均值 。

给你一个长度为 m 的整数数组 rolls ，其中 rolls[i] 是第 i 次观测的值。同时给你两个整数 mean 和 n 。

返回一个长度为 n 的数组，包含所有缺失的观测数据，且满足这 n + m 次投掷的 平均值 是 mean 。如果存在多组符合要求的答案，只需要返回其中任意一组即可。如果不存在答案，返回一个空数组。

k 个数字的 平均值 为这些数字求和后再除以 k 。

注意 mean 是一个整数，所以 n + m 次投掷的总和需要被 n + m 整除。

 

示例 1：

输入：rolls = [3,2,4,3], mean = 4, n = 2
输出：[6,6]
解释：所有 n + m 次投掷的平均值是 (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4 。
"""

class Solution:
    def missingRolls(self, rolls: List[int], mean: int, n: int) -> List[int]:
         = mean * (n+len(rolls))
        # 所有值取最大，依然小于总和，不符合条件
        if (sum(rolls) + n*6) < add_all:
            return []
        # 所有值取最小，依然大于总和，不符合条件
        elif (sum(rolls) + n*1) > add_all:
            return []
        # 从1开始一层层加，找到符合条件的值
        else:
            add_n = add_all - sum(rolls)
            list_n = [0] * n  # 初始化列表
            for num in range(6):
                num = num + 1
                if num * n >= add_n:
                    sub = add_n - (num-1)*n
                    list_n[0:sub] = [num] * sub
                    list_n[sub:] = [num-1] * (n-sub)
                    print(list_n)
                    return list_n

# 可以用q,v = divmod(add_n, n) 得到商和余数
'''
def missingRolls(self, rolls: List[int], mean: int, n: int) -> List[int]:
    s = (len(rolls) + n) * mean - sum(rolls)
    if s < n or s > n * 6:
        return []
    q, r = divmod(s, n)
    return [q + 1] * r + [q] * (n - r)
'''
